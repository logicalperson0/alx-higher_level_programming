Test cases for the function 2-matrix_divided.py
===============================================

For the module, it has 1 function that divides all elements in a matrix.
The matrix has to have the sam size, and each element must be either int or float
The div part of the arg must not be 0.

unless another matrix is used, for the test we will use the given matrix:

	>>> m = __import__('2-matrix_divided').matrix_divided
	>>> x = [[1, 2, 3], [4, 5, 6]]

For the Doc
===========
We have to verify if the module and function are documented, for ALX req

	>>> mod_doc = __import__("2-matrix_divided").__doc__
	>>> print(len(mod_doc) > 0)
	True

	>>> fun_doc = __import__("2-matrix_divided").matrix_divided.__doc__
	>>> print(len(mod_doc) > 0)
	True

Starting with general testing
=============================
Test for normal arg:

	>>> m(x, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> m(x, 5)
	[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]

	>>> m(x, 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

	>>> m([[2], [6]], 1)
	[[2.0], [6.0]]

	>>> m([[3]], 1)
	[[3.0]]

	>>> m([[3, 4, -9], [-3, 8, -10]], 3)
	[[1.0, 1.33, -3.0], [-1.0, 2.67, -3.33]]

For -ve num
===========

	>>> m([[-20], [-100]], 10)
	[[-2.0], [-10.0]]

	>>> m(x, 100 - 95)
	[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]

	>>> m(x, -98234)
	[[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]

For float num
=============

	>>> m(x, -5.5)
	[[-0.18, -0.36, -0.55], [-0.73, -0.91, -1.09]]

	>>> m(x, -7.7)
	[[-0.13, -0.26, -0.39], [-0.52, -0.65, -0.78]]

	>>> m(x, 5.5)
	[[0.18, 0.36, 0.55], [0.73, 0.91, 1.09]]

For typeerrors
==============

	for div:

	>>> m(x, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

	for mixing other than int or float:

	>>> m(x, "string-type")
	Traceback (most recent call last):
		...
	TypeError: div must be a number

	Rows of exact same size:

	>>> c = [[3, 6, 7], [12, 445, 6767, 33221]]

	>>> m(c, 10)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

	>>> d = [[3, 6, 7, 90], [12, 445, 6767, 33221], [30]]

	>>> m(d, 30)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

	The matrix also has to be a list of lists and each element in the list must be int or float:

	>>> j = [["s", "School", 2, 4], [4, 5, 6, "t"], ["p", "r"]]

	>>> m(j, 10)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	For none input for the matrix:

	>>> m(None, -7.7)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	For matrix nothing passed in:

	>>> j = [[]]

	>>> m(j, 14)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> j = [[], []]

	>>> m(j, 2)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> j = [(1, 2, 3), [4, 5, 6], [7, 8, 9]]

	>>> m(j, 101)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	Using more than 2 args for the function or less than 2 args: 

	>>> m(x, 34, 55, 44)
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() takes 2 positional arguments but 4 were given

	>>> m(x)
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> m(x, "1405")
	Traceback (most recent call last):
		...
	TypeError: div must be a number
